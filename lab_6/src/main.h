#ifndef MAIN_HEADER
#define MAIN_HEADER

#include <stdio.h>
#include <stdlib.h>

#define T (2)

/*
    Описание:
        Node - структура узла бинарного дерева поиска с прошивкой, на основе которого реализуется упорядоченная таблица с обратным обходом.

    Поля структуры:
        key - ключ узла,
        info - указатель на информацию
        left, right - указатели на левый и правый потомок соответственно,
        next - указатель на следующий узел при обратном обходе (прошивка).
*/
typedef struct Node {
    int n;
    int leaf;
    int key[2 * T - 1];
    char *info[2 * T - 1];
    struct Node *next_ptr[2 * T];
    // struct Node *parent_ptr;
} Node;

/*
    Описание:
        get_int используется для ввода целого числа из stdin и присваивания его переменной по переданному указателю.

    Возвращаемое значение:
        0 - если был обнаружен EOF,
        1 - в остальных случаях.
*/
int get_int(int *num);

/*
    Описание:
        get_str используется для ввода строки из stdin и возвращения указателя на нее.

    Возвращаемое значение:
        NULL - если был обнаружен EOF или произошла ошибка при выделении дополнительной памяти,
        1 - в остальных случаях.
*/
char *get_str();

/*
    Описание:
        dialog реализует основной диалог с пользователем.
        Запрашивает номер операции, которую необходимо выполнить, валидирует и возвращает его.

    Возвращаемое значение:
        Номер выбранной опции (см. определение const char *msgs[]).
*/
int dialog(const char *msgs[], int NMsgs);

/*
*/
Node *b_tree_create(void);

/*
*/
int dialog_b_tree_search(Node **root);

/*
*/
Node *b_tree_search(Node *ptr, int key, int *pos);

/*
*/
void b_tree_split_child(Node *ptr, int i);

/*
*/
void b_tree_insert_nonfull(Node *ptr, int key, char *info);

/*
*/
int dialog_b_tree_insert(Node **root);

/*
*/
int b_tree_insert(Node **root, int key, char *info);

/*
*/
int b_tree_print(Node **root);

/*
*/
int dilog_b_tree_delete(Node **root);

/*
*/
int b_tree_delete(Node **root);

/*
*/
Node *b_tree_find_parent(Node **root, int key);

/*
*/
int dialog_b_tree_find_successor(Node **root);

/*
*/
Node *b_tree_find_successor_key(Node **root, int key, int *successor_key);

/*
    Описание:
        initialize_node - служебная функция, инициализирует поля узла по переданным ключу и информации, указателям на другие узлы присваивается NULL.
 */
// void initialize_node(Node *node_ptr, int key, char *info);

/*
    Описание:
        find_parent - служебная функция, осуществляет поиск родительского узла по отношению к узлу, ключ которого передан в качестве аргумента.
    
    Возвращаемое значение:
        NULL - если передан ключ корня дерева или узла с таким ключом нет,
        Указатель на родительский узел - в остальных случаях.
*/
// Node *find_parent(Node *root, int key);

/*
    Описание:
          copy_next_node - служебная вспомогательная функция для прошивки дерева. 
          Осуществляет переопределение указателей на текущий и родительский узлы при поиске следующего узла. 
*/
// void copy_next_node(Node *root, Node **node_ptr, Node **par_ptr);

/*
    Описание:
        sew_tree - служебная функция, осуществляет прошивку дерева для его обратного обхода.
*/
// void sew_tree(Node *root);

/*
    Описание:
        dialog_add_node - диалоговая функция для вставки узла в упорядоченную таблицу.
        Запрашивается ключ и информация, а затем делегируется вызов функции вставки - add_node.

    Возвращаемое значение:
        0 - в случае, если был обнаружен EOF при вызове get_int,
        1 - во всех остальных случаях.
*/
// int dialog_add_node(Node **root);

/*
    Описание:
        add_node осуществляет вставку элемента в упорядоченную таблицу.

    Возвращаемое значение:
        0 - элемент вставлен,
        1 - дубликат ключей,
        4 - ошибка при выделении памяти.
*/
// int add_node(Node **root, int key, char *info);

/*
    Описание:
        dialog_find_node - диалоговая функция для поиска конкретного узла в упорядоченной таблицу.
        Запрашивается ключ узла, а затем делегируется вызов функции поиска - find_node.

    Возвращаемое значение:
        0 - в случае, если был обнаружен EOF при вызове get_int,
        1 - во всех остальных случаях.
*/
// int dialog_find_node(Node **root);

/*
    Описание:
        find_node осуществляет поиск узла в упорядоченной таблице по заданному ключу.

    Возвращаемое значение:
        NULL - элемент не найден,
        Указатель на узел - в противном случае.
*/
// Node *find_node(Node *root, int key);

/*
    Описание:
        dialog_find_next_min_node - диалоговая функция для поиск узла в упорядоченной таблице с наименьшим ключом, превосходящим необходимый.
        Запрашивает ввод целевого ключа и делегирует вызов функции find_next_min_node.

    Возвращаемое значение:
        0 - EOF,
        1 - обработка успешна.
*/
// int dialog_find_next_min_node(Node **root);

/*
    Описание:
        find_next_min_node осуществляет поиск узла в упорядоченной таблице с наименьшим ключом, превосходящим необходимый.

    Возвращаемое значение:
        NULL - узла с таким ключом нет; либо такой узел есть, но нет узла с большим ключом,
        Указатель на узел с наименьшим ключом, превосходящим необходимый - в противном случае.
*/
// Node *find_next_min_node(Node *root, int key);

/*
    Описание:
        dialog_del_node - диалоговая функция для удаления конкретного элемента из упорядоченной таблицы.
        Запрашивается ключ, а затем делегируется вызов функции удаления - del_node.

    Возвращаемое значение:
        0 - в случае, если был обнаружен EOF при вызове get_int,
        1 - во всех остальных случаях.
*/
// int dialog_del_node(Node **root);

/*
    Описание:
        del_node осуществляет удаление узла по ключу из упорядоченной таблицы.

    Возвращаемое значение:
        0 - элемент удален,
        2 - элемент с таким ключом не найден.
*/
// int del_node(Node **root, int key);

/*
    Описание:
        show_tree_map осуществляет вывод содержимого упорядоченной таблицы.

    Возвращаемое значение:
        1 - завершение вывода.
*/
// int show_tree_map(Node **root);

/*
    Описание:
        del_tree_map осуществляет освобождение памяти, выделенной под упорядоченную таблицу.
    
    Возвращаемое значение:
        0 - таблица пуста, освобождать память не надо,
        1 - произведено освобождение памяти.
*/
// int del_tree_map(Node **root);

#endif // MAIN_HEADER