#ifndef MAIN_HEADER
#define MAIN_HEADER

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define T (2)

/*
    Описание:
        Node - структура узла B-дерева степени 2 (2,3,4-дерево), на основе которого реализуется упорядоченная таблица с обратным обходом.

    Поля структуры:
        n - кол-во ключей в узле,
        leaf - булево значение, равное 1, если узел - лист, и 0, если он внутренний,
        key - массив ключей,
        info - массив указателей на информацию,
        next_ptr - массив указателей на дочерние узлы,
*/
typedef struct Node {
    int n;
    int leaf;
    int key[2 * T - 1];
    char *info[2 * T - 1];
    struct Node *next_ptr[2 * T];
} Node;

/*
    Описание:
        get_int используется для ввода целого числа из stdin и присваивания его переменной по переданному указателю.

    Возвращаемое значение:
        0 - если был обнаружен EOF,
        1 - в остальных случаях.
*/
int get_int(int *num);

/*
    Описание:
        get_str используется для ввода строки из stdin и возвращения указателя на нее.

    Возвращаемое значение:
        NULL - если был обнаружен EOF или произошла ошибка при выделении дополнительной памяти,
        1 - в остальных случаях.
*/
char *get_str();

/*
    Описание:
        dialog реализует основной диалог с пользователем.
        Запрашивает номер операции, которую необходимо выполнить, валидирует и возвращает его.

    Возвращаемое значение:
        Номер выбранной опции (см. определение const char *msgs[]).
*/
int dialog(const char *msgs[], int NMsgs);

/*
    Описание:
        b_tree_create создает пустой корень B-дерева и возвращает указатель на него.

    Возвращаемое значение:
        Указатель на пустой корень B-дерева.
*/
Node *b_tree_create(void);

/*
    Описание:
        dialog_b_tree_search - диалоговая функция для поиска элемента в B-дереве.
        Запрашивается ключ узла, а затем делегируется вызов функции поиска - b_tree_search.

    Возвращаемое значение:
        0 - в случае, если был обнаружен EOF при вызове get_int,
        1 - во всех остальных случаях.
*/
int dialog_b_tree_search(Node **root);

/*
    Описание:
        b_tree_search осуществляет поиск элемента в B-дереве.

    Возвращаемое значение:
        NULL - элемент не найден,
        Указатель на узел - в противном случае.
*/
Node *b_tree_search(Node *ptr, int key, int *pos);

/*
    Описание:
        b_tree_split_child разбивает заполненный дочерний узел ptr->next_ptr[i] на два незаполненных узла.
*/
void b_tree_split_child(Node *ptr, int i);

/*
    Описаниа:
        b_tree_insert_nonfull осуществляет вставку элемента в B-дерево, осуществляя при необходимости разбиение узла и рекурсивный спуск вниз.
*/
void b_tree_insert_nonfull(Node *ptr, int key, char *info);

/*
    Описание:
        dialog_b_tree_insert - диалоговая функция для вставки узла в B-дерево.
        Запрашивается ключ и информация, а затем делегируется вызов функции вставки - b_tree_insert.

    Возвращаемое значение:
        0 - в случае, если был обнаружен EOF при вызове get_int,
        1 - во всех остальных случаях.
*/
int dialog_b_tree_insert(Node **root);

/*
    Описание:
        b_tree_insert осуществляет вставку элемента в B-дерево.

    Возвращаемое значение:
        0 - элемент вставлен,
        1 - дубликат ключей
*/
int b_tree_insert(Node **root, int key, char *info);

/*
    Описание:
        b_tree_print осуществляет вывод содержимого B-дерева в обратном порядке следования ключей.

    Возвращаемое значение:
        1 - завершение вывода.
*/
int b_tree_print(Node **root);

/*
    Описание:
        dilog_b_tree_delete - диалоговая функция для удаления элемента из B-дерева.
        Запрашивается ключ, а затем делегируется вызов функции удаления - b_tree_delete.

    Возвращаемое значение:
        0 - в случае, если был обнаружен EOF при вызове get_int,
        1 - во всех остальных случаях.
*/
int dilog_b_tree_delete(Node **root);

/*
    Описание:
        b_tree_delete осуществляет удаление элемента по ключу из B-дерева.

    Возвращаемое значение:
        0 - элемент удален,
        2 - элемент с таким ключом не найден.
*/
int b_tree_delete(Node **root, int key);

/*
    Описание:
        b_tree_process_root - вспомогательная функция, необходимая для разовой обработки корня B-дерева при удалении элемента.

        Если корень содержит ровно 1 ключ и оба его дочерних узла содержат по T-1 ключей, 
        то происходит слияние левого дочернего узла с корнем и правым дочерним узлом,
        а также перестановка указателя на корень B-дерева.
*/
void b_tree_process_root(Node **root);

/*
*/
Node *b_tree_find_parent(Node **root, int key);

/*
    Описание:
        dialog_b_tree_find_successor - диалоговая функция для поиск в B-дереве преемника элемента, ключ которого необходимо ввести.
        Запрашивает ввод целевого ключа и делегирует вызов функции b_tree_find_successor_key.

    Возвращаемое значение:
        0 - EOF,
        1 - обработка успешна.
*/
int dialog_b_tree_find_successor(Node **root);

/*
    Описание:
        b_tree_find_successor_key осуществляет поиск в B-дереве преемника элемента, ключ которого необходимо ввести.

    Возвращаемое значение:
        NULL - узла с таким ключом нет; либо такой узел есть, но нет узла с большим ключом,
        Указатель на преемника.
*/
Node *b_tree_find_successor_key(Node **root, int key, int *successor_key, char **successor_info);

/*
    Описание:
        b_tree_find_predecessor_key осуществляет поиск в B-дереве предшественника элемента, ключ которого необходимо ввести.

    Возвращаемое значение:
        NULL - узла с таким ключом нет; либо такой узел есть, но нет узла с меньшим ключом,
        Указатель на предшественника.
*/
Node *b_tree_find_predecessor_key(Node **root, int key, int *predecessor_key, char **predecessor_info);

/*
    Описание:
        copy_information - вспомогательная функция для создания нового указателя на содержимое строки src (source).
        
        Используется в b_tree_delete для исключения попытки освобождения памяти по уже невалидному указателю.
*/
char *copy_information(char *src);

/*
    Описание:
        del_tree_map осуществляет освобождение памяти, выделенной под B-дерево.

    Возвращаемое значение:
        1 - освобождение памяти (при необходимости) успешно.
*/
int b_tree_erase(Node *ptr);

#endif // MAIN_HEADER